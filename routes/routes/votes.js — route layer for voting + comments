// routes/votes.js
const express = require('express');
const router = express.Router();

const {
  upsertArtist,
  voteFor,
  unvoteFor,
  getLeaderboard,
  addComment,
  listComments,
} = require('../services/votesService');

// POST /api/votes/artists { id, name }
router.post('/artists', (req, res) => {
  try {
    const { id, name } = req.body || {};
    if (!id || !name) return res.status(400).json({ error: 'id and name required' });
    const artist = upsertArtist({ id, name });
    res.status(201).json(artist);
  } catch (e) {
    console.error('POST /api/votes/artists error', e);
    res.status(500).json({ error: 'failed to upsert artist' });
  }
});

// GET /api/votes/leaderboard
router.get('/leaderboard', (_req, res) => {
  const lb = getLeaderboard();
  res.json(lb);
});

// POST /api/votes/:id/vote { userId }
router.post('/:id/vote', (req, res) => {
  try {
    const { id } = req.params;
    const { userId } = req.body || {};
    if (!userId) return res.status(400).json({ error: 'userId required' });
    const rec = voteFor(id, userId);
    if (!rec) return res.status(404).json({ error: 'artist not found' });
    res.json(rec);
  } catch (e) {
    console.error('POST /api/votes/:id/vote error', e);
    res.status(500).json({ error: 'failed to vote' });
  }
});

// POST /api/votes/:id/unvote { userId }
router.post('/:id/unvote', (req, res) => {
  try {
    const { id } = req.params;
    const { userId } = req.body || {};
    if (!userId) return res.status(400).json({ error: 'userId required' });
    const rec = unvoteFor(id, userId);
    if (!rec) return res.status(404).json({ error: 'artist not found' });
    res.json(rec);
  } catch (e) {
    console.error('POST /api/votes/:id/unvote error', e);
    res.status(500).json({ error: 'failed to unvote' });
  }
});

// POST /api/votes/:id/comments { userId, text }
router.post('/:id/comments', (req, res) => {
  try {
    const { id } = req.params;
    const { userId, text } = req.body || {};
    if (!userId || !text) return res.status(400).json({ error: 'userId and text required' });
    const rec = addComment(id, { userId, text });
    if (!rec) return res.status(404).json({ error: 'artist not found' });
    res.status(201).json(rec);
  } catch (e) {
    console.error('POST /api/votes/:id/comments error', e);
    res.status(500).json({ error: 'failed to add comment' });
  }
});

// GET /api/votes/:id/comments
router.get('/:id/comments', (req, res) => {
  const { id } = req.params;
  const list = listComments(id);
  if (!list) return res.status(404).json({ error: 'artist not found' });
  res.json(list);
});

module.exports = router;